<?xml version="1.0" encoding="utf-8"?>
<project name="Nexendrie" basedir="." default="test">
  <target name="test" depends="lint,cs,phpstan,tests,clean-db"/>
  <target name="test-coverage" depends="lint,cs,phpstan,tests-coverage,clean-db"/>
  <target name="test-phpdbg" depends="lint,cs,phpstan,tests-phpdbg,clean-db"/>
  <target name="test-ci" depends="install-ci,test"/>
  <target name="release">
    <input propertyName="version" message="Enter new version number" promptChar=":"/>
    <replaceregexp file="CHANGELOG" pattern='Version ([0-9]+\.)+[0-9]+(\+|-)dev' replace='Version ${version}'/>
    <echo message="Written new version number to CHANGELOG."/>
    <exec command="git add CHANGELOG" logoutput="true" passthru="true" checkreturn="true"/>
    <exec command="git commit --message='Version ${version}'" logoutput="true" passthru="true" checkreturn="true"/>
    <echo message="Created release commit."/>
    <exec command="git tag ${version} --message='Version ${version}' --sign" logoutput="true" passthru="true" checkreturn="true"/>
    <echo message="Created tag."/>
  </target>
  <target name="test-ci-pgsql">
    <phingcall target="install-ci"/>
    <exec executable="php" logoutput="true" passthru="true" checkreturn="true">
      <arg path="tools/pgsql_setup.php"/>
    </exec>
    <phingcall target="test"/>
  </target>
  <target name="test-ci-coverage" depends="install-ci,test-phpdbg"/>
  <target name="install">
    <property name="environment" value="production"/>
    <if>
      <not>
        <or>
          <equals arg1="${environment}" arg2="production"/>
          <equals arg1="${environment}" arg2="development"/>
          <equals arg1="${environment}" arg2="ci"/>
        </or>
      </not>
      <then>
        <fail message="Environment has to be either production, development or ci."/>
      </then>
    </if>
    <mkdir dir="temp/cache"/>
    <mkdir dir="temp/sessions"/>
    <if>
      <equals arg1="${environment}" arg2="ci"/>
      <then>
        <copy file="tests/ci.neon" tofile="tests/local.neon"/>
      </then>
      <else>
        <copy file="app/config/local.sample.neon" tofile="app/config/local.neon"/>
      </else>
    </if>
    <if>
      <not>
        <equals arg1="${environment}" arg2="production"/>
      </not>
      <then>
        <exec executable="composer" logoutput="true" passthru="true" checkreturn="true">
          <arg value="install"/>
          <arg value="--prefer-dist"/>
          <arg value="--no-progress"/>
          <arg value="--no-suggest"/>
          <arg value="--no-interaction"/>
        </exec>
      </then>
      <else>
        <exec executable="curl" logoutput="true" passthru="true" checkreturn="true">
          <arg value="-sS"/>
          <arg value="https://getcomposer.org/installer"/>
          <arg value="|"/>
          <arg value="php"/>
        </exec>
        <move file="composer.phar" tofile="composer"/>
        <exec executable="chmod" logoutput="true" passthru="true" checkreturn="true">
          <arg value="+x"/>
          <arg path="composer"/>
        </exec>
        <exec executable="composer" logoutput="true" passthru="true" checkreturn="true">
          <arg value="install"/>
          <arg value="--ignore-platform-reqs"/>
          <arg value="--no-dev"/>
        </exec>
      </else>
    </if>
    <if>
      <not>
        <equals arg1="${environment}" arg2="ci"/>
      </not>
      <then>
        <phingcall target="config-db"/>
      </then>
    </if>
    <if>
      <equals arg1="${environment}" arg2="development"/>
      <then>
        <copy file="app/config/local.neon" todir="tests"/>
      </then>
    </if>
  </target>
  <target name="install-ci">
    <phingcall target="install">
      <property name="environment" value="ci"/>
    </phingcall>
  </target>
  <target name="config-db">
    <echo message="Enter database configuration"/>
    <input propertyName="driver" validArgs="mysqli,pgsql" defaultValue="mysqli" message="Database driver " promptChar=":"/>
    <input propertyName="host" defaultValue="localhost" message="Database host" promptChar=":"/>
    <input propertyName="dbname" defaultValue="nexendrie" message="Database name" promptChar=":"/>
    <input propertyName="user" defaultValue="nexendrie" message="Database user" promptChar=":"/>
    <input propertyName="password" defaultValue="nexendrie" message="Database password" promptChar=":"/>
    <exec executable="php" logoutput="true" passthru="true" checkreturn="true">
      <arg path="tools/config_db.php"/>
      <arg value="${driver}"/>
      <arg value="${host}"/>
      <arg value="${dbname}"/>
      <arg value="${user}"/>
      <arg value="${password}"/>
    </exec>
  </target>
  <target name="deploy" depends="install-ci">
    <exec executable="php" logoutput="true" passthru="true" checkreturn="true">
      <arg path="tools/prepare_deploy.php"/>
    </exec>
    <exec executable="vendor/bin/deployment" logoutput="true" passthru="true" checkreturn="true">
      <arg path="deployment.ini"/>
    </exec>
  </target>
  <target name="lint" description="Syntax checks">
    <exec executable="vendor/bin/parallel-lint" logoutput="true" passthru="true" checkreturn="true">
      <arg value="."/>
      <arg value="-e"/>
      <arg value="php,phpt"/>
      <arg value="--exclude"/>
      <arg path="vendor"/>
      <arg value="--exclude"/>
      <arg path="temp"/>
      <arg value="--exclude"/>
      <arg path="tests/_temp"/>
      <arg value="--colors"/>
    </exec>
  </target>
  <target name="cs" description="Coding standards compliance">
    <exec executable="vendor/bin/phpcs" logoutput="true" passthru="true" checkreturn="true">
      <arg value="--extensions=php,phpt"/>
      <arg value="."/>
      <arg value="--standard=vendor/nexendrie/code-quality/ruleset.xml"/>
      <arg value="--colors"/>
      <arg value="-p"/>
    </exec>
  </target>
  <target name="phpstan" description="PHPStan analyzes">
    <exec executable="vendor/bin/phpstan" logoutput="true" passthru="true" checkreturn="true">
      <arg value="analyze"/>
      <arg value="-l"/>
      <arg value="6"/>
      <arg value="-c"/>
      <arg path="phpstan.neon"/>
      <arg path="app"/>
      <arg path="tests"/>
      <arg path="tools"/>
    </exec>
  </target>
  <target name="setup-db">
    <exec executable="php" logoutput="true" passthru="true" checkreturn="true">
      <arg path="tools/setup_db.php"/>
    </exec>
  </target>
  <target name="tests" description="Unit tests" depends="setup-db">
    <exec executable="vendor/bin/run-tests" logoutput="true" passthru="true" checkreturn="true">
      <arg value="-p"/>
      <arg value="php"/>
      <arg path="tests"/>
    </exec>
  </target>
  <target name="tests-coverage" description="Unit tests with code coverage (XDebug)" depends="setup-db">
    <exec executable="vendor/bin/run-tests" logoutput="true" passthru="true" checkreturn="true">
      <arg value="-p"/>
      <arg value="php"/>
      <arg path="tests"/>
      <arg value="--coverage"/>
      <arg path="./coverage.html"/>
      <arg value="--coverage-src"/>
      <arg path="./app"/>
    </exec>
  </target>
  <target name="tests-phpdbg" description="Unit tests with code coverage (phpdbg)" depends="setup-db">
    <exec executable="vendor/bin/run-tests" logoutput="true" passthru="true" checkreturn="true">
      <arg value="-p"/>
      <arg value="phpdbg"/>
      <arg path="tests"/>
      <arg value="--coverage"/>
      <arg path="./coverage.html"/>
      <arg value="--coverage-src"/>
      <arg path="./app"/>
    </exec>
  </target>
  <target name="clean-db">
    <exec executable="php" logoutput="true" passthru="true" checkreturn="true">
      <arg path="tools/clean_db.php"/>
    </exec>
  </target>
  <target name="scrutinizer">
    <phingcall target="install">
      <property name="environment" value="ci"/>
    </phingcall>
    <exec executable="vendor/bin/phpcs" logoutput="true" passthru="true" checkreturn="true">
      <arg value="--extensions=php,phpt"/>
      <arg value="."/>
      <arg value="--standard=vendor/nexendrie/code-quality/ruleset.xml"/>
      <arg value="--report=checkstyle"/>
      <arg value="--report-file=codesniffer.cs"/>
    </exec>
    <exec executable="php" logoutput="true" passthru="true" checkreturn="true">
      <arg path="tools/scrutinizer_setup.php"/>
    </exec>
    <exec command="mysql -uroot -e 'CREATE DATABASE nexendrie'" logoutput="true" passthru="true" checkreturn="true"/>
    <exec command="mysql_tzinfo_to_sql /usr/share/zoneinfo | mysql -u root mysql" logoutput="true" passthru="true" checkreturn="true"/>
    <phingcall target="setup-db"/>
    <exec executable="vendor/bin/run-tests" logoutput="true" passthru="true" checkreturn="true">
      <arg value="-p"/>
      <arg value="php"/>
      <arg path="tests"/>
      <arg value="--coverage"/>
      <arg path="./coverage.xml"/>
      <arg value="--coverage-src"/>
      <arg path="./app"/>
    </exec>
  </target>
</project>
